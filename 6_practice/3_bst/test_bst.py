import unittest #line:1
from bst import BST #line:2
import time #line:3
class TestBSTMethods (unittest .TestCase ):#line:5
	def test_init (O0O00000O000OOO0O ):#line:7
		O00O00O0O0OO00O0O =BST ()#line:8
		O0O00000O000OOO0O .assertTrue (O00O00O0O0OO00O0O .is_empty ())#line:9
	def test_contains_nothing (OO0000O0OOO00O0OO ):#line:11
		OO0O00O000OO00OO0 =BST ()#line:12
		OO0000O0OOO00O0OO .assertFalse (OO0O00O000OO00OO0 .contains (1 ))#line:13
	def test_contains_put (OOOOO00O00000OO00 ):#line:15
		OOOO0OOO000000000 =BST ()#line:16
		OOOO0OOO000000000 .put (5 )#line:17
		OOOOO00O00000OO00 .assertTrue (OOOO0OOO000000000 .contains (5 ))#line:18
	def test_contains_delete (OOO0OOO0OOOOO0O00 ):#line:20
		O000O00O0O0000O00 =BST ()#line:21
		O000O00O0O0000O00 .put (5 )#line:22
		O000O00O0O0000O00 .delete (5 )#line:23
		OOO0OOO0OOOOO0O00 .assertFalse (O000O00O0O0000O00 .contains (5 ))#line:24
	def test_contains_delete_other_value (OOOO000O0000OOO00 ):#line:26
		OOO000O0OOO00O0OO =BST ()#line:27
		OOO000O0OOO00O0OO .put (5 )#line:28
		OOO000O0OOO00O0OO .put (1 )#line:29
		OOO000O0OOO00O0OO .delete (1 )#line:30
		OOOO000O0000OOO00 .assertTrue (OOO000O0OOO00O0OO .contains (5 ))#line:31
		OOOO000O0000OOO00 .assertFalse (OOO000O0OOO00O0OO .contains (1 ))#line:32
	def test_change_root_value (OO0O0OO0OO0OO0000 ):#line:34
		OOO0O00000O0O00OO =BST ()#line:35
		OOO0O00000O0O00OO .put (5 )#line:36
		OOO0O00000O0O00OO .put (1 )#line:37
		OOO0O00000O0O00OO .delete (5 )#line:38
		OO0O0OO0OO0OO0000 .assertTrue (OOO0O00000O0O00OO .size ()==1 )#line:39
		OO0O0OO0OO0OO0000 .assertTrue (OOO0O00000O0O00OO .contains (1 ))#line:40
		OO0O0OO0OO0OO0000 .assertFalse (OOO0O00000O0O00OO .contains (5 ))#line:41
	def test_change_root_value_with_subtree (O0OO000000O0O0O00 ):#line:43
		OO0000O0OO0OO0O0O =BST ()#line:44
		OO0000O0OO0OO0O0O .put (5 )#line:45
		OO0000O0OO0OO0O0O .put (3 )#line:46
		OO0000O0OO0OO0O0O .put (1 )#line:47
		OO0000O0OO0OO0O0O .delete (5 )#line:48
		O0OO000000O0O0O00 .assertTrue (OO0000O0OO0OO0O0O .size ()==2 )#line:49
		O0OO000000O0O0O00 .assertTrue (OO0000O0OO0OO0O0O .contains (1 ))#line:50
		O0OO000000O0O0O00 .assertTrue (OO0000O0OO0OO0O0O .contains (3 ))#line:51
		O0OO000000O0O0O00 .assertFalse (OO0000O0OO0OO0O0O .contains (5 ))#line:52
	def test_delete (O00O0OO00OO00O0O0 ):#line:54
		OO00OOOO00O0O00OO =BST ()#line:55
		OO00OOOO00O0O00OO .put (1 )#line:56
		O00O0OO00OO00O0O0 .assertFalse (OO00OOOO00O0O00OO .is_empty ())#line:57
		OO00OOOO00O0O00OO .delete (1 )#line:58
		O00O0OO00OO00O0O0 .assertTrue (OO00OOOO00O0O00OO .is_empty ())#line:59
	def test_delete_all_roots (OO0O00OO000OO0OO0 ):#line:61
		O00O00000OO00O0OO =BST ()#line:62
		OOOO0000OOOOOO0O0 =[5 ,3 ,1 ,7 ,6 ,8 ]#line:63
		for O00OOO00OO0000O00 in OOOO0000OOOOOO0O0 :#line:64
				O00O00000OO00O0OO .put (O00OOO00OO0000O00 )#line:65
		while (OOOO0000OOOOOO0O0 ):#line:67
			for O00OOO00OO0000O00 in OOOO0000OOOOOO0O0 :#line:68
				OO0O00OO000OO0OO0 .assertTrue (O00O00000OO00O0OO .contains (O00OOO00OO0000O00 ))#line:69
			O000O0O000O00O0O0 =O00O00000OO00O0OO .delete (OOOO0000OOOOOO0O0 .pop (0 ))#line:70
			OO0O00OO000OO0OO0 .assertFalse (O00O00000OO00O0OO .contains (O000O0O000O00O0O0 ))#line:71
		OO0O00OO000OO0OO0 .assertTrue (O00O00000OO00O0OO .is_empty ())#line:73
	def test_iterator (OOO0OOOO0O000OOOO ):#line:75
		OO00000OOO000O000 =BST ()#line:76
		O00000O0OO000OOOO =[1 ,2 ,3 ,4 ,5 ]#line:77
		for OOOOOOOO00OO0O0O0 in O00000O0OO000OOOO :#line:78
			OO00000OOO000O000 .put (OOOOOOOO00OO0O0O0 )#line:79
		O0OOO00O000O00OO0 =OO00000OOO000O000 .iterator ()#line:81
		for OOOO0OO0OO0O000OO in range (len (O00000O0OO000OOOO )):#line:82
			OOO0OOOO0O000OOOO .assertTrue (O0OOO00O000O00OO0 [OOOO0OO0OO0O000OO ]==O00000O0OO000OOOO [OOOO0OO0OO0O000OO ])#line:83
	def test_iterator_sorted (O0OOOO0O0O00O0OO0 ):#line:85
		O0O000O0O0000O0OO =BST ()#line:86
		O00O000OOO00O00O0 =[1 ,2 ,3 ,4 ,5 ]#line:87
		O00OO0000O0OO0OO0 =[3 ,1 ,5 ,4 ,2 ]#line:88
		for OO00O0OOO0O0OO0OO in O00OO0000O0OO0OO0 :#line:89
			O0O000O0O0000O0OO .put (OO00O0OOO0O0OO0OO )#line:90
		O0O0OO0O0O00OOO00 =O0O000O0O0000O0OO .iterator ()#line:92
		for OO000OOOO0OOO0O00 in range (len (O00O000OOO00O00O0 )):#line:93
			O0OOOO0O0O00O0OO0 .assertTrue (O0O0OO0O0O00OOO00 [OO000OOOO0OOO0O00 ]==O00O000OOO00O00O0 [OO000OOOO0OOO0O00 ])#line:94
	def test_stress (OO0000OOOO00OOO0O ):#line:96
		OO0O0OOOO0O00OO00 =BST ()#line:97
		OO0O000OO00O00O00 =time .time ()#line:98
		OOOOOO0O00OO0OOO0 =open ("bst_input.txt","r")#line:99
		OO0O0000OO0OO0OOO =OOOOOO0O00OO0OOO0 .readline ()#line:100
		OOOOO0O0OO0000OO0 =[]#line:101
		while (OO0O0000OO0OO0OOO ):#line:102
			OO0O0OOOO0O00OO00 .put (OO0O0000OO0OO0OOO )#line:103
			OOOOO0O0OO0000OO0 .append (OO0O0000OO0OO0OOO )#line:104
			OO0O0000OO0OO0OOO =OOOOOO0O00OO0OOO0 .readline ()#line:105
		OOOOOO0O00OO0OOO0 .close ()#line:106
		while (OOOOO0O0OO0000OO0 ):#line:107
			OO0O0OOOO0O00OO00 .delete (OOOOO0O0OO0000OO0 .pop ())#line:108
		OO0000OOOO00OOO0O .assertTrue (time .time ()-OO0O000OO00O00O00 <1.25 )#line:109
if __name__ =='__main__':#line:112
	unittest .main ()#line:113
