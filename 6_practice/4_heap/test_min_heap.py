import random #line:1
import unittest #line:2
from min_heap import MinHeap #line:4
import time #line:5
class TestSolution (unittest .TestCase ):#line:7
	def test_five (O0OO0O000000OO0OO ):#line:8
		OOO0OO00OO0O0OO0O =MinHeap ()#line:9
		O0O0O000O00000000 =[9 ,5 ,6 ,2 ,3 ]#line:10
		for OO0OOO0000OOOO000 in range (0 ,len (O0O0O000O00000000 )):#line:12
			O0OO0O000000OO0OO .assertEqual (OOO0OO00OO0O0OO0O .size (),OO0OOO0000OOOO000 )#line:13
			OOO0OO00OO0O0OO0O .insert (O0O0O000O00000000 [OO0OOO0000OOOO000 ])#line:14
		O0OO0O000000OO0OO .assertEqual (OOO0OO00OO0O0OO0O .del_min (),2 )#line:16
		O0OO0O000000OO0OO .assertEqual (OOO0OO00OO0O0OO0O .size (),4 )#line:17
		O0OO0O000000OO0OO .assertEqual (OOO0OO00OO0O0OO0O .del_min (),3 )#line:18
		O0OO0O000000OO0OO .assertEqual (OOO0OO00OO0O0OO0O .size (),3 )#line:19
		O0OO0O000000OO0OO .assertEqual (OOO0OO00OO0O0OO0O .del_min (),5 )#line:20
		O0OO0O000000OO0OO .assertEqual (OOO0OO00OO0O0OO0O .size (),2 )#line:21
		O0OO0O000000OO0OO .assertEqual (OOO0OO00OO0O0OO0O .del_min (),6 )#line:22
		O0OO0O000000OO0OO .assertEqual (OOO0OO00OO0O0OO0O .size (),1 )#line:23
		O0OO0O000000OO0OO .assertEqual (OOO0OO00OO0O0OO0O .del_min (),9 )#line:24
		O0OO0O000000OO0OO .assertEqual (OOO0OO00OO0O0OO0O .size (),0 )#line:25
	def test_swim_sink_del_min (OO0O0O000O0O000OO ):#line:27
		O0O00OO0O00000OOO =MinHeap ()#line:28
		O0O00OO0O00000OOO .insert (1 )#line:29
		O0O00OO0O00000OOO .insert (2 )#line:30
		O0O00OO0O00000OOO .insert (17 )#line:31
		O0O00OO0O00000OOO .insert (4 )#line:32
		O0O00OO0O00000OOO .insert (15 )#line:33
		OO0O0O000O0O000OO .assertEqual (O0O00OO0O00000OOO .size (),5 )#line:34
		OO0O0O000O0O000OO .assertEqual (O0O00OO0O00000OOO .del_min (),1 )#line:35
		OO0O0O000O0O000OO .assertEqual (O0O00OO0O00000OOO .size (),4 )#line:36
		O0O00OO0O00000OOO .insert (7 )#line:38
		O0O00OO0O00000OOO .insert (8 )#line:39
		O0O00OO0O00000OOO .insert (6 )#line:40
		O0O00OO0O00000OOO .insert (9 )#line:41
		O0O00OO0O00000OOO .insert (10 )#line:42
		O0O00OO0O00000OOO .insert (0 )#line:43
		O0O00OO0O00000OOO .insert (5 )#line:44
		OO0O0O000O0O000OO .assertEqual (O0O00OO0O00000OOO .del_min (),0 )#line:46
		OO0O0O000O0O000OO .assertEqual (O0O00OO0O00000OOO .del_min (),2 )#line:47
		OO0O0O000O0O000OO .assertEqual (O0O00OO0O00000OOO .del_min (),4 )#line:48
		OO0O0O000O0O000OO .assertEqual (O0O00OO0O00000OOO .del_min (),5 )#line:49
		OO0O0O000O0O000OO .assertEqual (O0O00OO0O00000OOO .del_min (),6 )#line:50
		OO0O0O000O0O000OO .assertEqual (O0O00OO0O00000OOO .del_min (),7 )#line:51
		OO0O0O000O0O000OO .assertEqual (O0O00OO0O00000OOO .del_min (),8 )#line:52
		OO0O0O000O0O000OO .assertEqual (O0O00OO0O00000OOO .del_min (),9 )#line:53
		OO0O0O000O0O000OO .assertEqual (O0O00OO0O00000OOO .del_min (),10 )#line:54
		OO0O0O000O0O000OO .assertEqual (O0O00OO0O00000OOO .del_min (),15 )#line:55
		OO0O0O000O0O000OO .assertEqual (O0O00OO0O00000OOO .del_min (),17 )#line:56
		OO0O0O000O0O000OO .assertEqual (O0O00OO0O00000OOO .size (),0 )#line:57
	def test_runtime_insert (OOOO0OOOO00OOO0OO ):#line:59
		O0000O0O000OOOOOO =MinHeap ()#line:60
		for O0OO000O0000OOOOO in range (1 ,1000 ):#line:61
			O0000O0O000OOOOOO .insert (O0OO000O0000OOOOO )#line:62
		O000O00O0OO000OOO =time .clock ()#line:63
		O0000O0O000OOOOOO .insert (0 )#line:64
		OOO0O00OO0OOOO0OO =time .clock ()#line:65
		OO0OOOO0OOOOO0O00 =OOO0O00OO0OOOO0OO -O000O00O0OO000OOO #line:66
		OO0OOOO0OOOOO0O00 *=10000 #line:67
		OOOOO000OO0OO0000 =OO0OOOO0OOOOO0O00 #line:69
		O0000O0O000OOOOOO =MinHeap ()#line:71
		for O0OO000O0000OOOOO in range (10 ,1000000 ):#line:72
			O0000O0O000OOOOOO .insert (O0OO000O0000OOOOO )#line:73
		O000O00O0OO000OOO =time .clock ()#line:74
		for O0OO000O0000OOOOO in range (9 ,0 ,-1 ):#line:75
			O0000O0O000OOOOOO .insert (O0OO000O0000OOOOO )#line:76
		OOO0O00OO0OOOO0OO =time .clock ()#line:77
		OO0OOOO0OOOOO0O00 =OOO0O00OO0OOOO0OO -O000O00O0OO000OOO #line:78
		OO0OOOO0OOOOO0O00 *=1000 #line:79
		OO0OOOOO00O0OOO00 =OO0OOOO0OOOOO0O00 #line:80
		OOOO0OOOO00OOO0OO .assertTrue (OO0OOOOO00O0OOO00 <(10 *OOOOO000OO0OO0000 ))#line:81
	def test_runtime_del (O00O000O00000000O ):#line:83
		O0OO00OO0000O00OO =MinHeap ()#line:85
		for O0OOOOOO0O00OO000 in range (1 ,1000 ):#line:86
			O0OO00OO0000O00OO .insert (O0OOOOOO0O00OO000 )#line:87
		O0O00OOO00O0O000O =time .clock ()#line:88
		O0OO00OO0000O00OO .del_min ()#line:89
		O000O0OOOOO0OOO0O =time .clock ()#line:90
		OOO0O0O00O00O000O =O000O0OOOOO0OOO0O -O0O00OOO00O0O000O #line:91
		OOO0O0O00O00O000O *=10000 #line:92
		OO00OO00O0OOO0O0O =OOO0O0O00O00O000O #line:93
		O0OO00OO0000O00OO =MinHeap ()#line:95
		for O0OOOOOO0O00OO000 in range (1 ,1000000 ):#line:96
			O0OO00OO0000O00OO .insert (O0OOOOOO0O00OO000 )#line:97
		O0O00OOO00O0O000O =time .clock ()#line:98
		for O0OOOOOO0O00OO000 in range (10 ):#line:99
			O0OO00OO0000O00OO .del_min ()#line:100
		O000O0OOOOO0OOO0O =time .clock ()#line:101
		OOO0O0O00O00O000O =O000O0OOOOO0OOO0O -O0O00OOO00O0O000O #line:102
		OOO0O0O00O00O000O *=1000 #line:103
		O0O0OOOOOOOOO0OO0 =OOO0O0O00O00O000O #line:104
		O00O000O00000000O .assertTrue (O0O0OOOOOOOOO0OO0 <(10 *OO00OO00O0OOO0O0O ))#line:106
if __name__ =='__main__':#line:109
	unittest .main ()#line:110
